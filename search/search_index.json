{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CryoSiam Documentation","text":"<p>Welcome to the official documentation for the CryoSiam method. This guide will help to use this tool effectively.</p> <p>CryoSiam is a self-supervised deep learning framework that works on dense and subtomogram levels. The dense part of the framework is additionally trained on subtasks for tomogram denoising, semantic segmentation (particle identification) and instance segmentation. The subtomogram level part of the method offers embedding representation of the detected particles in the tomogram/s. </p> <p>Installation \u2192</p> <p>Usage \u2192</p> <p>Tutorial \u2192</p>"},{"location":"denoising/","title":"Denoising","text":"<p>The denoising module reduces noise in tomograms while preserving structural detail. It\u2019s typically the first step before semantic/instance segmentation or particle identification. For best performance, it's recommended to have a WBP reconstructed tomogram, since the denoising model was trained on WBP simulated tomograms. </p> <p></p> <ul> <li>Left: Raw WBP noisy tomogram  </li> <li>Middle: Gaussian filtered tomogram</li> <li>Right: CryoSiam denoised tomogram</li> </ul>"},{"location":"denoising/#trained-model","title":"Trained Model","text":"<p>You can download the trained model from here: CryoSiam denoising model (v1.0)</p>"},{"location":"denoising/#command","title":"Command","text":"<p>Run denoising via the CLI using a YAML configuration file:</p> <pre><code>cryosiam denoise --config_file=configs/config_denoising.yaml\n</code></pre> <p>What it does - Loads the trained denoising model and your tomograms - Applies sliding\u2011window 3D inference (GPU/CPU) - Writes denoised volumes to the output folder (and optional intermediates)</p>"},{"location":"denoising/#example-configuration-file","title":"Example Configuration File","text":"<p> Download example config</p> <pre><code>data_folder: '/scratch/stojanov/empiar_datasets/EMPIAR-11756/tomograms'\nlog_dir: '/g/mahamid/stojanov/empiar_datasets/EMPIAR-11756/'\nprediction_folder: '/scratch/stojanov/empiar_datasets/EMPIAR-11756/predictions/denoised'\n\ntrained_model: '/scratch/stojanov/trained_models/cryosiam_denoising.ckpt' \nfile_extension: '.mrc'\n\ntest_files: null\n\nsave_raw_predictions: False\nscale_prediction: False\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std:  1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n\nhyper_parameters:\n  batch_size: 3\n</code></pre>"},{"location":"denoising/#config-reference","title":"Config Reference","text":""},{"location":"denoising/#toplevel-keys","title":"Top\u2011level keys","text":"Key Type Must change the default value Description <code>data_folder</code> <code>str</code> \u2705 Directory containing input tomograms to denoise. <code>log_dir</code> <code>str</code> \u2705 Folder where logs (runtime, metrics, debug files) are written. <code>prediction_folder</code> <code>str</code> \u2705 Output directory where denoised tomograms (and optional intermediates) are saved. <code>trained_model</code> <code>str</code> \u2705 Path to the denoising checkpoint file (e.g., <code>.ckpt</code>). <code>file_extension</code> <code>str</code> \u274c Extension of input tomograms (<code>.mrc</code> or <code>.rec</code>). <code>test_files</code> <code>list[str]</code> or <code>null</code> \u274c List of specific filenames to process. Use <code>null</code> to process all files in <code>data_folder</code>. <code>save_raw_predictions</code> <code>bool</code> \u274c If <code>true</code>, also save the raw network output before any scaling/post\u2011processing. <code>scale_prediction</code> <code>bool</code> \u274c If <code>true</code>, rescale/restore prediction to the target intensity range (recommended for viewing/export)."},{"location":"denoising/#parameters","title":"<code>parameters</code>","text":"Key Type Must change the default value Description <code>gpu_devices</code> <code>int</code> or <code>list[int]</code> \u274c Is there a GPU(s) to use. Example: <code>1</code> or <code>[0]</code>. Set to <code>[0]</code> to force CPU inference (not recommended). <code>data.patch_size</code> <code>list[int]</code> \u274c 3D sliding\u2011window patch size, e.g., <code>[128,128,128]</code>. Reduce if you hit GPU OOM error, otherwise the default is what was use for training the models. <code>data.min</code> <code>float</code> \u274c Intensity floor applied before normalization/clipping. <code>data.max</code> <code>float</code> \u274c Intensity ceiling applied before normalization/clipping. <code>data.mean</code> <code>float</code> \u274c Mean used for normalization (match training stats if model expects it). <code>data.std</code> <code>float</code> \u274c Std used for normalization (match training stats if model expects it). <code>network.in_channels</code> <code>int</code> \u274c Number of input channels (typically <code>1</code> for tomograms). <code>network.spatial_dims</code> <code>int</code> \u274c Dimensionality of the model (use <code>3</code> for 3D tomograms). <p>Tips \u2022 Keep <code>patch_size</code> divisible by the network downsampling factor (e.g., 128/64/32).</p>"},{"location":"denoising/#hyper_parameters","title":"<code>hyper_parameters</code>","text":"Key Type Must change the default value Description <code>batch_size</code> <code>int</code> \u274c Number of 3D patches per forward pass. Increase for throughput; decrease if you hit GPU memory limits."},{"location":"denoising/#outputs","title":"Outputs","text":"<ul> <li>Denoised tomograms written to <code>prediction_folder</code> (file extension as implemented).  </li> <li>Optional raw outputs if <code>save_raw_predictions: true</code>.  </li> <li>Logs saved under <code>log_dir</code> (progress, timings, optional debug artifacts).</li> </ul> <p>Naming: outputs follow the input basenames with an appropriate suffix/extension as implemented in CryoSiam.</p>"},{"location":"denoising/#troubleshooting","title":"Troubleshooting","text":"Symptom Suggested Fix <code>CUDA out of memory</code> Lower <code>hyper_parameters.batch_size</code> and/or <code>parameters.data.patch_size</code>; ensure no other heavy GPU processes are running. No files processed Ensure <code>data_folder</code> exists and <code>test_files</code> is <code>null</code> or matches filenames exactly. Output intensities look off Toggle <code>scale_prediction</code>; adjust <code>data.min/max</code> or remove custom <code>mean/std</code> to match training normalization. Checkpoint/shape mismatch Verify <code>network.in_channels</code> and <code>spatial_dims</code> match the trained model; confirm you\u2019re using the correct <code>.ckpt</code>."},{"location":"denoising/#next-steps","title":"Next Steps","text":"<ul> <li>Continue with Semantic segmentation, Instance segmentation or Particle identification</li> <li>Review the Usage overview for full pipelines</li> </ul>"},{"location":"faq/","title":"FAQ","text":"<p>Coming soon ...</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides instructions for installing CryoSiam using either pip or conda, with full support for GPU-enabled PyTorch.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.8</li> <li>Conda (optional, for environment-based setup)</li> <li>(Optional) NVIDIA GPU with CUDA 11.8+ drivers for GPU acceleration</li> </ul>"},{"location":"installation/#option-1-install-via-conda-environment","title":"Option 1: Install via Conda Environment","text":"<p>You can also use Conda to create an isolated environment with all dependencies.</p>"},{"location":"installation/#step-1-create-the-environment","title":"Step 1: Create the Environment","text":"<pre><code>conda env create -f https://github.com/frosinastojanovska/cryosiam/cryosiam/blob/main/environment.yml\nconda activate cryosiam\n</code></pre>"},{"location":"installation/#step-2-install-cryosiam","title":"Step 2: Install <code>cryosiam</code>","text":"<p>After activating the environment:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\npip install --no-deps .\n</code></pre>"},{"location":"installation/#option-2-install-via-pip","title":"Option 2: Install via pip","text":""},{"location":"installation/#step-1-install-gpu-enabled-pytorch","title":"Step 1: Install GPU-enabled PyTorch","text":"<p>Before installing this package, install the correct PyTorch build with GPU support:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>If you don\u2019t need GPU support, you can install the CPU-only version instead:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cpu\n</code></pre>"},{"location":"installation/#step-2-install-the-package-and-dependencies","title":"Step 2: Install the Package and Dependencies","text":"<p>Clone the repository (if applicable) and install:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\n\n# Recommended: use a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the package and dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>To verify the CryoSiam installation, run:</p> <pre><code>cryosiam --version\n</code></pre> <p>To check that PyTorch is installed correctly and can detect your GPU:</p> <pre><code>import torch\nprint(torch.cuda.is_available())  # Should return True if GPU is available\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CUDA errors: Make sure your system has the correct NVIDIA drivers and CUDA version.</li> <li>Missing packages: Double-check that you followed the correct pip or conda install steps.</li> <li>Conflicts: It's recommended to use a clean virtual environment or conda environment.</li> </ul>"},{"location":"installation/#need-help","title":"Need Help?","text":"<p>If you run into issues, feel free to open an issue on the GitHub repository.</p>"},{"location":"installation/#dont-have-conda-installed","title":"Don't Have Conda Installed?","text":"<p>If you don't have <code>conda</code> installed yet, we recommend using Miniforge (lightweight) or Anaconda (full-featured).</p>"},{"location":"installation/#option-1-install-miniforge-recommended","title":"Option 1: Install Miniforge (recommended)","text":"<p>Miniforge is a minimal installer for Conda that supports <code>conda-forge</code> by default.</p> <p>Linux / macOS:</p> <pre><code># Download and install Miniforge\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\nbash Miniforge3-Linux-x86_64.sh\n</code></pre> <p>Windows:</p> <ol> <li> <p>Download the latest installer from:    https://github.com/conda-forge/miniforge/releases</p> </li> <li> <p>Run the <code>.exe</code> installer and follow the setup.</p> </li> </ol>"},{"location":"installation/#option-2-install-anaconda-full-distribution","title":"Option 2: Install Anaconda (Full Distribution)","text":"<p>Anaconda includes Conda, Python, and hundreds of data science packages.</p> <p>Download from: https://www.anaconda.com/products/distribution</p> <p>After installing Miniforge or Anaconda, return to the main Conda installation steps above.</p>"},{"location":"usage/","title":"Workflows","text":"<p>CryoSiam workflows are designed to process cryo-electron tomography (CryoET) data step by step. Each module focuses on a specific task, and you can combine them into analysis pipelines depending on your scientific question.</p>"},{"location":"usage/#workflow-1-denoising-semantic-segmentation-particle-identification","title":"Workflow 1: Denoising \u2192 Semantic Segmentation / Particle Identification","text":"<ol> <li>Denoising    Clean the raw tomogram to reduce noise while preserving structural details.  </li> <li>Semantic Segmentation    Classify each voxel into biological classes such as membranes, filaments, or complexes. Alternative: Particle Identification can be used to locate specific particles of interest directly after denoising.</li> </ol> <p>See details in Denoising, Semantic Segmentation, and Particle Identification.</p>"},{"location":"usage/#workflow-2-denoising-instance-segmentation","title":"Workflow 2: Denoising \u2192 Instance Segmentation","text":"<ol> <li>Denoising    Prepare a cleaner tomogram for reliable downstream processing.  </li> <li>Instance Segmentation    Separate individual structures even when they overlap or belong to the same class.</li> </ol> <p>See details in Denoising and Instance Segmentation.</p>"},{"location":"usage/#workflow-3-denoising-instance-segmentation-subtomogram-embeddings","title":"Workflow 3: Denoising \u2192 Instance Segmentation \u2192 Subtomogram Embeddings","text":"<ol> <li>Denoising    Preprocess tomograms for structural clarity.  </li> <li>Instance Segmentation    Extract and separate candidate subtomograms.  </li> <li>Subtomogram Embeddings    Represent subtomograms as feature vectors for clustering, comparison, or downstream analysis.</li> </ol> <p>See details in Denoising, Instance Segmentation, and (upcoming) Subtomogram Embeddings.</p>"},{"location":"usage/#configuration-files","title":"Configuration Files","text":"<p>Each module requires a YAML configuration file defining inputs, outputs, and model parameters. You can run a module as:</p> <pre><code>cryosiam &lt;module&gt; --config_file=configs/&lt;module&gt;.yaml\n</code></pre> <p>Explanation of the YAML configuration files is given into the specific documentation page. </p>"},{"location":"visualization/","title":"Visualization","text":"<p>Coming soon ...</p>"}]}