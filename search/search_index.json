{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#cryosiam-documentation","title":"CryoSiam Documentation","text":"<p>Welcome to the official documentation for the CryoSiam method. This guide will help to use this tool effectively.</p> <p>CryoSiam is a self-supervised deep learning framework that works on dense and subtomogram levels. The dense part of the framework is additionally trained on subtasks for tomogram denoising, semantic segmentation (particle identification) and instance segmentation. The subtomogram level part of the method offers embedding representation of the detected particles in the tomogram/s. </p> <p>Installation \u2192</p> <p>Usage \u2192</p> <p>Tutorial \u2192</p>"},{"location":"denoising/","title":"Denoising","text":""},{"location":"denoising/#denoising","title":"Denoising","text":"<p>The denoising module reduces noise in tomograms while preserving structural detail. It\u2019s typically the first step before semantic/instance segmentation or particle identification. For best performance, it's recommended to have a WBP reconstructed tomogram, since the denoising model was trained on WBP simulated tomograms.</p> <p></p> <ul> <li>Left: Raw WBP noisy tomogram</li> <li>Middle: Gaussian filtered tomogram</li> <li>Right: CryoSiam denoised tomogram</li> </ul>"},{"location":"denoising/#trained-model","title":"Trained Model","text":"<p>You can download the trained model from here: CryoSiam denoising model (v1.0)</p>"},{"location":"denoising/#command","title":"Command","text":"<p>Run denoising via the CLI using a YAML configuration file:</p> <pre><code>cryosiam denoise_predict --config_file=configs/config_denoising.yaml\n</code></pre> <p>What it does</p> <ul> <li>Loads the trained denoising model and your tomogram/s</li> <li>Applies sliding\u2011window 3D inference (GPU/CPU)</li> <li>Writes denoised volumes to the output folder (and optional intermediates)</li> </ul> <p>Visualization For visualization of the results, CryoSiam-Vis can be used as described here.</p>"},{"location":"denoising/#example-configuration-file","title":"Example Configuration File","text":"<p> Download example config</p> <pre><code>data_folder: '/scratch/stojanov/datatset1/tomograms'\nlog_dir: '/scratch/stojanov/datatset1/'\nprediction_folder: '/scratch/stojanov/datatset1/predictions/denoised'\n\ntrained_model: '/scratch/stojanov/trained_models/cryosiam_denoising.ckpt'\nfile_extension: '.mrc'\n\ntest_files: null\n\nsave_raw_predictions: False\nscale_prediction: True\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std: 1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n\nhyper_parameters:\n  batch_size: 3\n</code></pre>"},{"location":"denoising/#config-reference","title":"Config Reference","text":""},{"location":"denoising/#toplevel-keys","title":"Top\u2011level keys","text":"Key Type Must change the default value Description <code>data_folder</code> <code>str</code> \u2705 Directory containing input tomograms to denoise. <code>log_dir</code> <code>str</code> \u2705 Folder where logs (runtime, metrics, debug files) are written. <code>prediction_folder</code> <code>str</code> \u2705 Output directory where denoised tomograms (and optional intermediates) are saved. <code>trained_model</code> <code>str</code> \u2705 Path to the denoising trained model checkpoint file (e.g., <code>.ckpt</code>). <code>file_extension</code> <code>str</code> \u274c Extension of input tomograms (<code>.mrc</code> or <code>.rec</code>). Default is <code>.mrc</code>. <code>test_files</code> <code>list[str]</code> or <code>null</code> \u274c List of specific filenames to process. Use <code>null</code> to process all files in <code>data_folder</code>. <code>save_raw_predictions</code> <code>bool</code> \u274c If <code>true</code>, also save the raw .h5 file/s. <code>scale_prediction</code> <code>bool</code> \u274c If <code>true</code>, rescale/restore prediction to intensity 0 to 1."},{"location":"denoising/#parameters","title":"<code>parameters</code>","text":"Key Type Must change the default value Description <code>gpu_devices</code> <code>int</code> or <code>list[int]</code> \u274c Is there a GPU(s) to use. Example: <code>1</code> or <code>[0]</code>. Set to <code>[0]</code> to force CPU inference (not recommended). <code>data.patch_size</code> <code>list[int]</code> \u274c 3D sliding\u2011window patch size, e.g., <code>[128,128,128]</code>. Reduce if you hit GPU OOM error, otherwise the default is what was use for training the models. <code>data.min</code> <code>float</code> \u274c Intensity floor applied before normalization/clipping. <code>data.max</code> <code>float</code> \u274c Intensity ceiling applied before normalization/clipping. <code>data.mean</code> <code>float</code> \u274c Mean used for normalization (match training stats if model expects it). <code>data.std</code> <code>float</code> \u274c Std used for normalization (match training stats if model expects it). <code>network.in_channels</code> <code>int</code> \u274c Number of input channels (typically <code>1</code> for tomograms). <code>network.spatial_dims</code> <code>int</code> \u274c Dimensionality of the model (use <code>3</code> for 3D tomograms). <p>Tips \u2022 Keep <code>patch_size</code> the same value as used in the trained network (e.g., the available trained networks are with patch size 128).</p>"},{"location":"denoising/#hyper_parameters","title":"<code>hyper_parameters</code>","text":"Key Type Must change the default value Description <code>batch_size</code> <code>int</code> \u274c Number of 3D patches per forward pass. Increase for throughput; decrease if you hit GPU memory limits."},{"location":"denoising/#outputs","title":"Outputs","text":"<ul> <li>Denoised tomograms written to <code>prediction_folder</code> (file extension as implemented).</li> <li>Optional raw outputs if <code>save_raw_predictions: true</code>.</li> <li>Logs saved under <code>log_dir</code> (progress, timings, optional debug artifacts).</li> </ul> <p>Naming: outputs follow the input basenames with an appropriate suffix/extension as implemented in CryoSiam.</p>"},{"location":"denoising/#troubleshooting","title":"Troubleshooting","text":"Symptom Suggested Fix <code>CUDA out of memory</code> Lower <code>hyper_parameters.batch_size</code> and/or <code>parameters.data.patch_size</code>; ensure no other heavy GPU processes are running. No files processed Ensure <code>data_folder</code> exists and <code>test_files</code> is <code>null</code> or matches filenames exactly. Output intensities look off Toggle <code>scale_prediction</code>; adjust <code>data.min/max</code> or remove custom <code>mean/std</code> to match training normalization. Checkpoint/shape mismatch Verify <code>network.in_channels</code> and <code>spatial_dims</code> match the trained model; confirm you\u2019re using the correct <code>.ckpt</code>."},{"location":"denoising/#next-steps","title":"Next Steps","text":"<ul> <li>Continue   with Semantic segmentation, Semantic segmentation training, Instance segmentation   or Particle identification</li> <li>Review the Usage overview for full pipelines</li> </ul>"},{"location":"faq/","title":"FAQ","text":"<p>Coming soon ...</p>"},{"location":"installation/","title":"CryoSiam installation","text":""},{"location":"installation/#cryosiam-installation-guide","title":"CryoSiam Installation Guide","text":"<p>This guide provides instructions for installing CryoSiam using either pip or conda, with full support for GPU-enabled PyTorch.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.8</li> <li>Conda (optional, for environment-based setup)</li> <li>(Optional) NVIDIA GPU with CUDA 11.8+ drivers for GPU acceleration</li> </ul>"},{"location":"installation/#option-1-install-via-conda-environment","title":"Option 1: Install via Conda Environment","text":"<p>You can also use Conda to create an isolated environment with all dependencies.</p>"},{"location":"installation/#step-1-create-the-environment","title":"Step 1: Create the Environment","text":"<pre><code>conda env create -f https://github.com/frosinastojanovska/cryosiam/blob/main/environment.yml\nconda activate cryosiam\n</code></pre>"},{"location":"installation/#step-2-install-cryosiam","title":"Step 2: Install <code>cryosiam</code>","text":"<p>After activating the environment:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\npip install --no-deps .\n</code></pre>"},{"location":"installation/#option-2-install-via-pip","title":"Option 2: Install via pip","text":""},{"location":"installation/#step-1-install-gpu-enabled-pytorch","title":"Step 1: Install GPU-enabled PyTorch","text":"<p>Before installing this package, install the correct PyTorch build with GPU support:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>If you don\u2019t need GPU support, you can install the CPU-only version instead:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cpu\n</code></pre>"},{"location":"installation/#step-2-install-the-package-and-dependencies","title":"Step 2: Install the Package and Dependencies","text":"<p>Clone the repository (if applicable) and install:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\n\n# Recommended: use a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the package and dependencies\npip install -r requirements.txt\npip install --no-deps .\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>To verify the CryoSiam installation, run:</p> <pre><code>cryosiam --version\n</code></pre> <p>To check that PyTorch is installed correctly and can detect your GPU:</p> <pre><code>import torch\nprint(torch.cuda.is_available())  # Should return True if GPU is available\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CUDA errors: Make sure your system has the correct NVIDIA drivers and CUDA version.</li> <li>Missing packages: Double-check that you followed the correct pip or conda install steps.</li> <li>Conflicts: It's recommended to use a clean virtual environment or conda environment.</li> </ul>"},{"location":"installation/#need-help","title":"Need Help?","text":"<p>If you run into issues, feel free to open an issue on the GitHub repository.</p>"},{"location":"installation/#dont-have-conda-installed","title":"Don't Have Conda Installed?","text":"<p>If you don't have <code>conda</code> installed yet, we recommend using Miniforge (lightweight) or Anaconda (full-featured).</p>"},{"location":"installation/#option-1-install-miniforge-recommended","title":"Option 1: Install Miniforge (recommended)","text":"<p>Miniforge is a minimal installer for Conda that supports <code>conda-forge</code> by default.</p> <p>Linux / macOS:</p> <pre><code># Download and install Miniforge\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\nbash Miniforge3-Linux-x86_64.sh\n</code></pre> <p>Windows:</p> <ol> <li> <p>Download the latest installer from:    https://github.com/conda-forge/miniforge/releases</p> </li> <li> <p>Run the <code>.exe</code> installer and follow the setup.</p> </li> </ol>"},{"location":"installation/#option-2-install-anaconda-full-distribution","title":"Option 2: Install Anaconda (Full Distribution)","text":"<p>Anaconda includes Conda, Python, and hundreds of data science packages.</p> <p>Download from: https://www.anaconda.com/products/distribution</p> <p>After installing Miniforge or Anaconda, return to the main Conda installation steps above.</p>"},{"location":"installation_vis/","title":"CryoSiam-Vis installation","text":""},{"location":"installation_vis/#cryosiam-vis-installation-guide","title":"CryoSiam-Vis Installation Guide","text":"<p>This guide provides instructions for installing CryoSiam-Vis for easy visualization of the predictions from CryoSiam.</p>"},{"location":"installation_vis/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.8</li> <li>Conda (optional, for environment-based setup)</li> </ul>"},{"location":"installation_vis/#option-1-install-via-conda-environment","title":"Option 1: Install via Conda Environment","text":"<p>You can also use Conda to create an isolated environment with all dependencies.</p>"},{"location":"installation_vis/#step-1-create-the-environment","title":"Step 1: Create the Environment","text":"<pre><code>conda env create -f https://github.com/frosinastojanovska/cryosiam_vis/blob/main/environment.yml\nconda activate cryosiam_vis\n</code></pre>"},{"location":"installation_vis/#step-2-install-cryosiam_vis","title":"Step 2: Install <code>cryosiam_vis</code>","text":"<p>After activating the environment:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam_vis.git\ncd cryosiam_vis\npip install --no-deps .\n</code></pre>"},{"location":"installation_vis/#option-2-install-via-pip","title":"Option 2: Install via pip","text":"<p>Clone the repository and install:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam_vis.git\ncd cryosiam_vis\n\n# Recommended: use a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the package and dependencies\npip install -r requirements.txt\npip install --no-deps .\n</code></pre>"},{"location":"installation_vis/#verify-installation","title":"Verify Installation","text":"<p>To verify the CryoSiam-Vis installation, run:</p> <pre><code>cryosiam_vis --version\n</code></pre>"},{"location":"installation_vis/#need-help","title":"Need Help?","text":"<p>If you run into issues, feel free to open an issue on the GitHub repository.</p>"},{"location":"installation_vis/#dont-have-conda-installed","title":"Don't Have Conda Installed?","text":"<p>If you don't have <code>conda</code> installed yet, check the instructions here</p>"},{"location":"instance/","title":"Instance segmentation","text":"<p>Coming soon ...</p>"},{"location":"particle_identification/","title":"Particle identification","text":"<p>Coming soon ...</p>"},{"location":"semantic/","title":"Semantic segmentation","text":""},{"location":"semantic/#semantic-segmentation","title":"Semantic Segmentation","text":"<p>The semantic segmentation module classifies each voxel of a tomogram into biologically meaningful categories (e.g. membranes, particles, filaments (DNA/RNA), microtubules, actin). It also offers lamella prediction as a sub-step to restrict analysis to lamella regions, which is highly recommended to avoid false positives outside the lamella (since models were not trained on the noisy surrounding volume).</p>"},{"location":"semantic/#two-abilities","title":"Two Abilities","text":"<ol> <li> <p>Lamella Prediction</p> <ul> <li>Identifies lamella (sample) region.</li> <li>Recommended to remove false positives outside the lamella.</li> <li>Produces binary masks and probability maps.</li> </ul> </li> <li> <p>Voxel-wise Semantic Segmentation</p> <ul> <li>Classifies voxels inside the lamella into biological classes.</li> <li>Works best when restricted to lamella.</li> </ul> </li> </ol> <p>Recommended workflow: <code>Denoising \u2192 Lamella Prediction \u2192 Semantic Segmentation</code></p>"},{"location":"semantic/#example-results","title":"Example Results","text":"<ul> <li>Lamella mask: restricts analysis to lamella regions</li> <li>Semantic segmentation: predicted structures inside lamella</li> </ul>"},{"location":"semantic/#input-denoised-tomogram","title":"Input (Denoised Tomogram)","text":""},{"location":"semantic/#lamella-prediction","title":"Lamella Prediction","text":""},{"location":"semantic/#semantic-segmentation_1","title":"Semantic Segmentation","text":""},{"location":"semantic/#trained-models","title":"Trained Models","text":"<p>You can download the trained lamella model from here: CryoSiam lamella model (v1.0), and the semantic segmentation model from here: CryoSiam semantic model (v1.0). You can also train your own model and then perform prediction with that model. Review the Semantic training for explanation of the model training procedure.</p>"},{"location":"semantic/#command","title":"Command","text":"<p>Run lamella prediction via the CLI using a YAML configuration file:</p> <pre><code>cryosiam semantic_predict --config_file=configs/config_lamella.yaml\n</code></pre> <p>What it does</p> <ul> <li>Loads the trained lamella model and your denoised tomogram/s</li> <li>Applies sliding\u2011window 3D inference (GPU/CPU)</li> <li>Writes semantic segmentation predictions to the output folder (and optional intermediates)</li> </ul> <p>Run semantic segmentation via the CLI using a YAML configuration file:</p> <pre><code>cryosiam semantic_predict --config_file=configs/config_semantic.yaml\n</code></pre> <p>What it does</p> <ul> <li>Loads the trained semantic model and your denoised tomogram/s and lamella prediction/s</li> <li>Applies sliding\u2011window 3D inference (GPU/CPU)</li> <li>Writes semantic segmentation predictions to the output folder (and optional intermediates)</li> </ul>"},{"location":"semantic/#example-configurations","title":"Example Configurations","text":"<p>CryoSiam semantic segmentation is usually run in two stages.</p>"},{"location":"semantic/#1-lamella-prediction-configsconfig_lamellayaml","title":"1. Lamella Prediction (<code>configs/config_lamella.yaml</code>)","text":"<p>\ud83d\udce5 Download lamella config</p> <pre><code>data_folder: '/scratch/stojanov/datatset1/predictions/denoised'\nlog_dir: '/scratch/stojanov/datatset1/'\nprediction_folder: '/scratch/stojanov/datatset1/predictions/lamella'\n\ntrained_model: '/scratch/stojanov/trained_models/cryosiam_lamella.ckpt'\nfile_extension: '.mrc'\n\ntest_files: null\n\nsave_internal_files: False\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std: 1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n    threshold: 0.9\n    postprocessing: True\n    3d_postprocessing: False\n\nhyper_parameters:\n  batch_size: 2\n</code></pre>"},{"location":"semantic/#config-reference","title":"Config Reference","text":""},{"location":"semantic/#toplevel-keys","title":"Top\u2011level keys","text":"Key Type Must change the default value Description <code>data_folder</code> <code>str</code> \u2705 Directory containing denoised tomograms to predict lamella from. <code>log_dir</code> <code>str</code> \u2705 Folder where logs (runtime, metrics, debug files) are written. <code>prediction_folder</code> <code>str</code> \u2705 Directory where lamella masks (and optional intermediates) are saved. <code>trained_model</code> <code>str</code> \u2705 Path to the lamella trained model checkpoint file (e.g., <code>.ckpt</code>). <code>file_extension</code> <code>str</code> \u274c Extension of input tomograms (<code>.mrc</code> or <code>.rec</code>). Default is <code>.mrc</code>. <code>test_files</code> <code>list[str]</code> or <code>null</code> \u274c Specific tomograms to process. <code>null</code> = process all. <code>save_internal_files</code> <code>bool</code> \u274c Save intermediate files (prob maps, debug info)."},{"location":"semantic/#parameters","title":"<code>parameters</code>","text":"Key Type Must change the default value Description <code>gpu_devices</code> <code>int</code> or <code>list[int]</code> \u274c Is there a GPU(s) to use. Example: <code>1</code> or <code>[0]</code>. Set to <code>[0]</code> to force CPU inference (not recommended). <code>data.patch_size</code> <code>list[int]</code> \u274c 3D sliding\u2011window patch size, e.g., <code>[128,128,128]</code>. Reduce if you hit GPU OOM error, otherwise the default is what was use for training the models. <code>data.min</code> <code>float</code> \u274c Intensity floor applied before normalization/clipping. <code>data.max</code> <code>float</code> \u274c Intensity ceiling applied before normalization/clipping. <code>data.mean</code> <code>float</code> \u274c Mean used for normalization (match training stats if model expects it). <code>data.std</code> <code>float</code> \u274c Std used for normalization (match training stats if model expects it). <code>network.in_channels</code> <code>int</code> \u274c Number of input channels (typically <code>1</code> for tomograms). <code>network.spatial_dims</code> <code>int</code> \u274c Dimensionality of the model (use <code>3</code> for 3D tomograms). <code>network.threshold</code> <code>float</code> \u2705 Probability cutoff to binarize lamella mask. Default <code>0.9</code>. <code>network.postprocessing</code> <code>bool</code> \u274c Apply morphological postprocessing for cleanup (recommended). <code>network.3d_postprocessing</code> <code>bool</code> \u274c Apply the postprocessing in 3D. <p>Tips \u2022 Set <code>threshold</code> lower (e.g., 0.7) if lamella masks are too strict. \u2022 Always run with <code>postprocessing: True</code> for cleaner masks.</p>"},{"location":"semantic/#hyper_parameters","title":"<code>hyper_parameters</code>","text":"Key Type Must change the default value Description <code>batch_size</code> <code>int</code> \u274c Number of 3D patches per forward pass. Increase for throughput; decrease if you hit GPU memory limits."},{"location":"semantic/#2-semantic-segmentation-configsconfig_semanticyaml","title":"2. Semantic Segmentation (<code>configs/config_semantic.yaml</code>)","text":"<p>\ud83d\udce5 Download semantic config</p> <pre><code>data_folder: '/scratch/stojanov/datatset1/predictions/denoised'\nmask_folder: '/scratch/stojanov/datatset1/predictions/lamella'\nlog_dir: '/scratch/stojanov/datatset1/'\nprediction_folder: '/scratch/stojanov/datatset1/predictions/semantic'\n\ntrained_model: '/scratch/stojanov/trained_models/cryosiam_semantic.ckpt'\nfile_extension: '.mrc'\n\ntest_files: null\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std: 1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n    threshold: 0.1\n    postprocessing_sizes: [ -1, 5000, -1, -1, -1 ]\n\nhyper_parameters:\n  batch_size: 2\n</code></pre>"},{"location":"semantic/#config-reference_1","title":"Config Reference","text":""},{"location":"semantic/#toplevel-keys_1","title":"Top\u2011level keys","text":"Key Type Must change the default value Description <code>data_folder</code> <code>str</code> \u2705 Directory containing denoised tomograms. <code>mask_folder</code> <code>str</code> \u2705 Directory containing predicted lamella masks (from step 1). <code>log_dir</code> <code>str</code> \u2705 Folder where logs are written. <code>prediction_folder</code> <code>str</code> \u2705 Directory where prediction masks (and optional intermediates) are saved. <code>trained_model</code> <code>str</code> \u2705 Path to the semantic checkpoint file (e.g., <code>.ckpt</code>). <code>file_extension</code> <code>str</code> \u274c Extension of input tomograms (<code>.mrc</code> or <code>.rec</code>). Default is <code>.mrc</code>. <code>test_files</code> <code>list[str]</code> or <code>null</code> \u274c Specific tomograms to process. <code>null</code> = process all."},{"location":"semantic/#parameters_1","title":"<code>parameters</code>","text":"Key Type Must change the default value Description <code>gpu_devices</code> <code>int</code> or <code>list[int]</code> \u274c Is there a GPU(s) to use. Example: <code>1</code> or <code>[0]</code>. Set to <code>[0]</code> to force CPU inference (not recommended). <code>data.patch_size</code> <code>list[int]</code> \u274c 3D sliding\u2011window patch size, e.g., <code>[128,128,128]</code>. Reduce if you hit GPU OOM error, otherwise the default is what was use for training the models. <code>data.min</code> <code>float</code> \u274c Intensity floor applied before normalization/clipping. <code>data.max</code> <code>float</code> \u274c Intensity ceiling applied before normalization/clipping. <code>data.mean</code> <code>float</code> \u274c Mean used for normalization (match training stats if model expects it). <code>data.std</code> <code>float</code> \u274c Std used for normalization (match training stats if model expects it). <code>network.in_channels</code> <code>int</code> \u274c Number of input channels (typically <code>1</code> for tomograms). <code>network.spatial_dims</code> <code>int</code> \u274c Dimensionality of the model (use <code>3</code> for 3D tomograms). <code>network.threshold</code> <code>float</code> \u274c Probability cutoff to clean very small probability predictions. Default <code>0.1</code>. <code>network.postprocessing_sizes</code> <code>list[int]</code> \u2705 Postprocessing thresholds for the size of connected components. Example: <code>[ -1, 5000, -1, -1, -1 ]</code> keeps only connected components &gt;5000 voxels for label 2. <p>Tips \u2022 Tune <code>postprocessing_sizes</code> depending on dataset type and noise in predictions.</p>"},{"location":"semantic/#hyper_parameters_1","title":"<code>hyper_parameters</code>","text":"Key Type Must change the default value Description <code>batch_size</code> <code>int</code> \u274c Number of 3D patches per forward pass. Increase for throughput; decrease if you hit GPU memory limits."},{"location":"semantic/#outputs","title":"Outputs","text":"<ul> <li>Lamella mask written to <code>prediction_folder</code> (file extension is .h5).</li> <li>Segmentation mask written to <code>prediction_folder</code> (file extension is .h5).</li> <li>Optional raw outputs if <code>save_raw_predictions: true</code>.</li> <li>Logs saved under <code>log_dir</code> (progress, timings, optional debug artifacts).</li> </ul> <p>Naming: outputs follow the input basenames with an appropriate suffix/extension as implemented in CryoSiam.</p>"},{"location":"semantic/#troubleshooting","title":"Troubleshooting","text":"Symptom Suggested Fix False positives outside lamella Ensure lamella prediction is run and <code>mask_folder</code> is set correctly. CUDA OOM Lower <code>batch_size</code> or patch size. Blank segmentation Check <code>trained_model</code> path and lower thresholds."},{"location":"semantic/#next-steps","title":"Next Steps","text":"<ul> <li>Continue with Semantic segmentation training, Instance segmentation   or Particle identification</li> <li>Review the Usage overview for full pipelines</li> </ul>"},{"location":"semantic_training/","title":"Semantic segmentation training","text":"<p>Coming soon ...</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Coming soon ...</p>"},{"location":"usage/","title":"Overview and workflows","text":""},{"location":"usage/#workflows","title":"Workflows","text":"<p>CryoSiam workflows are designed to process cryo-electron tomography (CryoET) data step by step. Each module focuses on a specific task, and you can combine them into analysis pipelines depending on your scientific question.</p>"},{"location":"usage/#workflow-1-denoising-semantic-segmentation-particle-identification","title":"Workflow 1: Denoising \u2192 Semantic Segmentation / Particle Identification","text":"<ol> <li>Denoising    Clean the raw tomogram to reduce noise while preserving structural details.  </li> <li>Semantic Segmentation    Classify each voxel into biological classes such as membranes, filaments, or complexes. Alternative: Particle Identification can be used to locate specific particles of interest directly after denoising.</li> </ol> <p>See details in Denoising, Semantic Segmentation, and Particle Identification.</p>"},{"location":"usage/#workflow-2-denoising-instance-segmentation","title":"Workflow 2: Denoising \u2192 Instance Segmentation","text":"<ol> <li>Denoising    Prepare a cleaner tomogram for reliable downstream processing.  </li> <li>Instance Segmentation    Separate individual structures even when they overlap or belong to the same class.</li> </ol> <p>See details in Denoising and Instance Segmentation.</p>"},{"location":"usage/#workflow-3-denoising-instance-segmentation-subtomogram-embeddings","title":"Workflow 3: Denoising \u2192 Instance Segmentation \u2192 Subtomogram Embeddings","text":"<ol> <li>Denoising    Preprocess tomograms for structural clarity.  </li> <li>Instance Segmentation    Extract and separate candidate subtomograms.  </li> <li>Subtomogram Embeddings    Represent subtomograms as feature vectors for clustering, comparison, or downstream analysis.</li> </ol> <p>See details in Denoising, Instance Segmentation, and (upcoming) Subtomogram Embeddings.</p>"},{"location":"usage/#configuration-files","title":"Configuration Files","text":"<p>Each module requires a YAML configuration file defining inputs, outputs, and model parameters. You can run a module as:</p> <pre><code>cryosiam &lt;module&gt; --config_file=configs/&lt;module&gt;.yaml\n</code></pre> <p>Explanation of the YAML configuration files is given into the specific documentation page. </p>"},{"location":"visualization/","title":"Visualization","text":""},{"location":"visualization/#visualization-cryosiamvis","title":"Visualization (CryoSiam\u2011Vis)","text":"<p>The cryosiam-vis package provides interactive visualization utilities (via napari and dash) for results produced by CryoSiam:</p> <ul> <li>Denoised tomograms</li> <li>Semantic segmentation results</li> <li>Instance segmentation results</li> <li>Particle/coordinate sets from .star files</li> <li>Embedding UMAP spaces</li> </ul>"},{"location":"visualization/#install","title":"Install","text":"<p>Refer to the CryoSiam-Vis installation guide. </p>"},{"location":"visualization/#command-overview","title":"Command Overview","text":"<p>All visualizations are accessed through a single CLI with subcommands:</p> <pre><code>cryosiam_vis --version\ncryosiam_vis &lt;subcommand&gt; [arguments]\n</code></pre> <p>Available subcommands:</p> <ul> <li><code>visualize_denoising</code> \u2014 show denoised vs raw tomogram</li> <li><code>visualize_semantic</code> \u2014 overlay semantic masks on tomogram</li> <li><code>visualize_instance</code> \u2014 explore instance masks</li> <li><code>visualize_coordinates</code> \u2014 plot points from a .star file on a tomogram</li> <li><code>visualize_embeddings</code> \u2014 open an interactive embedding explorer</li> </ul>"},{"location":"visualization/#visualize_denoising","title":"<code>visualize_denoising</code>","text":"<p>Show the denoised tomogram produced by <code>cryosiam denoise</code> (and optionally compare to raw).</p>"},{"location":"visualization/#usage","title":"Usage","text":"<pre><code>cryosiam_vis visualize_denoising --config_file configs/denoise.yaml --filename TS_01.mrc\n</code></pre>"},{"location":"visualization/#arguments","title":"Arguments","text":"Arg Required Description <code>--config_file</code> \u2705 The same YAML used with <code>cryosiam denoise_predict</code> (paths are read from it). <code>--filename</code> \u2705 Tomogram filename (including extension), must exist under <code>data_folder</code> from the config."},{"location":"visualization/#what-it-loads","title":"What it loads","text":"<ul> <li>Input tomogram from <code>data_folder</code></li> <li>Denoised output from <code>prediction_folder</code></li> <li>Opens layers in napari for side\u2011by\u2011side inspection</li> </ul>"},{"location":"visualization/#visualize_semantic","title":"<code>visualize_semantic</code>","text":"<p>Overlay semantic predictions over the denoised tomogram.</p>"},{"location":"visualization/#usage_1","title":"Usage","text":"<pre><code>cryosiam_vis visualize_semantic --config_file configs/semantic.yaml --filename TS_01.mrc\n</code></pre>"},{"location":"visualization/#arguments_1","title":"Arguments","text":"Arg Required Description <code>--config_file</code> \u2705 The same YAML used with <code>cryosiam semantic_predict</code>. Reads <code>data_folder</code>, <code>mask_folder</code>, and <code>prediction_folder</code>. <code>--filename</code> \u2705 Tomogram filename (including extension)."},{"location":"visualization/#what-it-loads_1","title":"What it loads","text":"<ul> <li>Denoised tomogram (<code>data_folder</code>)</li> <li>Semantic probabilities and/or segmentation (<code>prediction_folder</code>)</li> </ul>"},{"location":"visualization/#visualize_instance","title":"<code>visualize_instance</code>","text":"<p>Visualize instance segmentation volumes and labels.</p>"},{"location":"visualization/#usage_2","title":"Usage","text":"<pre><code>cryosiam_vis visualize_instance --config_file configs/instance.yaml --filename TS_01.mrc\n</code></pre>"},{"location":"visualization/#arguments_2","title":"Arguments","text":"Arg Required Description <code>--config_file</code> \u2705 The same YAML used with <code>cryosiam instance_predict</code>. <code>--filename</code> \u2705 Tomogram filename (including extension)."},{"location":"visualization/#what-it-loads_2","title":"What it loads","text":"<ul> <li>Denoised tomogram (<code>data_folder</code>)</li> <li>Instance masks/labels from the prediction folder defined in the config</li> </ul>"},{"location":"visualization/#visualize_coordinates","title":"<code>visualize_coordinates</code>","text":"<p>Plot particle coordinates from a .star file onto a tomogram.</p>"},{"location":"visualization/#usage_3","title":"Usage","text":"<pre><code>cryosiam_vis visualize_coordinates --tomo_path /path/to/denoised --filename TS_01.mrc --star_file /path/to/coordinates.star --point_size 15\n</code></pre>"},{"location":"visualization/#arguments_3","title":"Arguments","text":"Arg Required Default Description <code>--tomo_path</code> \u2705 \u2014 Folder containing tomograms (ideally denoised). <code>--filename</code> \u2705 \u2014 Tomogram filename (with extension). <code>--star_file</code> \u2705 \u2014 Path to the .star file with point coordinates. <code>--point_size</code> \u274c <code>15</code> Point marker size in napari."},{"location":"visualization/#notes","title":"Notes","text":"<ul> <li>Make sure the voxel size / coordinate system used to generate the .star matches the tomogram voxel size.</li> <li>Supports common STAR conventions via <code>starfile</code>.</li> </ul>"},{"location":"visualization/#visualize_embeddings","title":"<code>visualize_embeddings</code>","text":"<p>Open the embedding viewer (for exploratory analysis).</p>"},{"location":"visualization/#usage_4","title":"Usage","text":"<pre><code>cryosiam_vis visualize_embeddings\n</code></pre>"},{"location":"visualization/#what-it-does","title":"What it does","text":"<ul> <li>Loads embedding UMAP (if present in the working directory or a default location used by your inference)</li> <li>Opens an interactive explorer (2D UMAP projection, selection, metadata overlays)</li> </ul>"},{"location":"visualization/#see-also","title":"See also","text":"<ul> <li>CryoSiam usage overview</li> </ul>"}]}