{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CryoSiam Documentation","text":"<p>Welcome to the official documentation for the CryoSiam method. This guide will help to use this tool effectively.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Deep learning-based structural analysis</li> <li>Automated CryoET processing</li> <li>User-friendly for non-experts</li> </ul> <p>Get Started \u2192</p>"},{"location":"faq/","title":"FAQ","text":"<p>Coming soon ...</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides instructions for installing CryoSiam using either pip or conda, with full support for GPU-enabled PyTorch.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.8</li> <li>Conda (optional, for environment-based setup)</li> <li>(Optional) NVIDIA GPU with CUDA 11.8+ drivers for GPU acceleration</li> </ul>"},{"location":"installation/#option-1-install-via-conda-environment","title":"Option 1: Install via Conda Environment","text":"<p>You can also use Conda to create an isolated environment with all dependencies.</p>"},{"location":"installation/#step-1-create-the-environment","title":"Step 1: Create the Environment","text":"<pre><code>conda env create -f environment.yml\nconda activate cryosiam\n</code></pre>"},{"location":"installation/#step-2-install-cryosiam","title":"Step 2: Install <code>cryosiam</code>","text":"<p>After activating the environment:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\npip install --no-deps .\n</code></pre>"},{"location":"installation/#option-2-install-via-pip","title":"Option 2: Install via pip","text":""},{"location":"installation/#step-1-install-gpu-enabled-pytorch","title":"Step 1: Install GPU-enabled PyTorch","text":"<p>Before installing this package, install the correct PyTorch build with GPU support:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>If you don\u2019t need GPU support, you can install the CPU-only version instead:</p> <pre><code>pip install torch==2.1.2 torchvision==0.16.2 --index-url https://download.pytorch.org/whl/cpu\n</code></pre>"},{"location":"installation/#step-2-install-the-package-and-dependencies","title":"Step 2: Install the Package and Dependencies","text":"<p>Clone the repository (if applicable) and install:</p> <pre><code>git clone https://github.com/frosinastojanovska/cryosiam.git\ncd cryosiam\n\n# Recommended: use a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the package and dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>To verify the CryoSiam installation, run:</p> <pre><code>cryosiam --version\n</code></pre> <p>To check that PyTorch is installed correctly and can detect your GPU:</p> <pre><code>import torch\nprint(torch.cuda.is_available())  # Should return True if GPU is available\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CUDA errors: Make sure your system has the correct NVIDIA drivers and CUDA version.</li> <li>Missing packages: Double-check that you followed the correct pip or conda install steps.</li> <li>Conflicts: It's recommended to use a clean virtual environment or conda environment.</li> </ul>"},{"location":"installation/#need-help","title":"Need Help?","text":"<p>If you run into issues, feel free to open an issue on the GitHub repository.</p>"},{"location":"installation/#dont-have-conda-installed","title":"Don't Have Conda Installed?","text":"<p>If you don't have <code>conda</code> installed yet, we recommend using Miniforge (lightweight) or Anaconda (full-featured).</p>"},{"location":"installation/#option-1-install-miniforge-recommended","title":"Option 1: Install Miniforge (recommended)","text":"<p>Miniforge is a minimal installer for Conda that supports <code>conda-forge</code> by default.</p> <p>Linux / macOS:</p> <pre><code># Download and install Miniforge\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\nbash Miniforge3-Linux-x86_64.sh\n</code></pre> <p>Windows:</p> <ol> <li> <p>Download the latest installer from:    https://github.com/conda-forge/miniforge/releases</p> </li> <li> <p>Run the <code>.exe</code> installer and follow the setup.</p> </li> </ol>"},{"location":"installation/#option-2-install-anaconda-full-distribution","title":"Option 2: Install Anaconda (Full Distribution)","text":"<p>Anaconda includes Conda, Python, and hundreds of data science packages.</p> <p>Download from: https://www.anaconda.com/products/distribution</p> <p>After installing Miniforge or Anaconda, return to the main Conda installation steps above.</p>"},{"location":"preprocessing/","title":"Preprocessing","text":"<p>Coming soon ...</p>"},{"location":"usage/","title":"Overview","text":"<p>Coming soon ...</p>"},{"location":"denoising/prediction/","title":"Prediction","text":"<p>Coming soon ...</p>"},{"location":"denoising/training/","title":"Training","text":"<p>Coming soon ...</p>"},{"location":"instance/prediction/","title":"Prediction","text":"<p>Coming soon ...</p>"},{"location":"instance/training/","title":"Training","text":"<p>Coming soon ...</p>"},{"location":"semantic/prediction/","title":"CryoSiam Semantic Prediction","text":"<p>This guide explains how to run semantic segmentation prediction using CryoSiam. You'll use a YAML config file to specify your model, data, and output options.</p>"},{"location":"semantic/prediction/#how-to-run","title":"How to Run","text":"<p>Use the CryoSiam CLI with the <code>semantic_predict</code> subcommand:</p> <pre><code>cryosiam semantic_predict --config_file=configs/semantic_predict.yaml\n</code></pre> <p>This command loads the configuration, prepares the model and data, and saves the predicted segmentation.</p>"},{"location":"semantic/prediction/#example-configuration-file","title":"Example Configuration File","text":"<p>Below is a full example of a configuration file in YAML format. You can create this file at any location and pass the path to it with the <code>--config_file</code> argument.</p> Click to expand the example YAML <pre><code>data_folder: '/scratch/cryosiam/tomograms/'\nprediction_folder: '/scratch/cryosiam/experiments/dense_simsiam_semantic/predictions'\ntrained_model: '/scratch/cryosiam/experiments/dense_simsiam_semantic/model/model-best.ckpt'\nfile_extension: '.mrc'\n\ntest_files: [ 'TS_56_6.80Apx.mrc', 'TS_61_6.80Apx.mrc' ]\n\nsave_internal_files: False\nsave_original_file_extension: False\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std: 1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n    out_channels: 1\n    postprocessing: True\n    postprocessing_sizes: [ -1, 10000, -1, -1, -1 ]\n\nhyper_parameters:\n  batch_size: 5\n</code></pre> <p>This configuration tells CryoSiam: - Where the model is located - Which data to use - Where the prediction should be saved</p>"},{"location":"semantic/prediction/#configuration-fields-explained","title":"Configuration Fields Explained","text":"Field Description <code>data_folder</code> Path to the folder containing the denoised/noisy tomograms <code>prediction_folder</code> Path to the folder where the predictions will be saved <code>trained_model</code> Path to the trained model checkpoint <code>.ckpt</code> <code>file_extension</code> File extension of the tomograms, can be <code>.mrc</code> or <code>.rec</code> <code>test_files</code> <code>null</code> if all of the tomograms in <code>data_folder</code> will be predicted, else a list of selected tomogram names <code>save_internal_files</code> If the probability and distance map will be saved in .h5 file <code>save_original_file_extension</code> If <code>False</code> the output is saved in <code>.h5</code> format, else it will be saved in the <code>file_extension</code> format"},{"location":"semantic/prediction/#parameters","title":"<code>parameters</code>","text":"Field Description <code>input_dir</code> Folder containing <code>.mrc</code> or <code>.tiff</code> tomograms <code>file_type</code> Format of input tomograms: <code>mrc</code> or <code>tiff</code> <code>voxel_size</code> Size of one voxel in \u00c5ngstr\u00f6ms (used for scaling) <code>normalize</code> Normalize intensity before prediction (<code>true/false</code>)"},{"location":"semantic/prediction/#hyper_parameters","title":"<code>hyper_parameters</code>","text":"Field Description <code>batch_size</code> Batch size for prediction"},{"location":"semantic/prediction/#model-selection","title":"Model Selection","text":"<p>CryoSiam provides pretrained models for semantic segmentation. You can download and use them by specifying the correct model file in your configuration.</p>"},{"location":"semantic/prediction/#available-pretrained-models","title":"Available Pretrained Models","text":""},{"location":"semantic/prediction/#1-general-semantic-segmentation-model","title":"1. General Semantic Segmentation Model","text":"<ul> <li>Purpose: Identifies broad structural classes in cryo-ET tomograms.</li> <li>Classes: </li> <li>Membrane</li> <li>Particles</li> <li>Microtubules</li> <li>Actin</li> <li>Filaments (DNA/RNA)</li> <li>Use Case: Suitable for exploratory annotation and segmentation of standard biological samples.</li> </ul>"},{"location":"semantic/prediction/#2-target-complex-segmentation-model","title":"2. Target Complex Segmentation Model","text":"<ul> <li>Purpose: Focused segmentation model for identifying specific protein complexes as described in the CryoSiam publication.</li> <li>Use Case: Use this model when your goal is to identify specific known structures, such as ribosomes or specific viral components.</li> </ul>"},{"location":"semantic/prediction/#troubleshooting","title":"Troubleshooting","text":"Problem Suggested Fix <code>FileNotFoundError</code> Check paths to model or input directory <code>CUDA out of memory</code> Lower <code>batch_size</code> or use <code>device: cpu</code>"},{"location":"semantic/prediction/#related-commands","title":"Related Commands","text":"<ul> <li>CryoSiam Denoising</li> <li>CryoSiam Instance Prediction</li> <li>Installation Guide</li> </ul>"},{"location":"semantic/prediction/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ </li> <li>Or open an issue on GitHub</li> </ul>"},{"location":"semantic/semi_supervised_training/","title":"Semi-supervised training","text":"<p>Coming soon ...</p>"},{"location":"semantic/training/","title":"CryoSiam Semantic Training","text":"<p>This guide explains how to run semantic segmentation training using CryoSiam. You'll use a YAML config file to specify the configurations of the model, data, pretrained weights, and training options.</p>"},{"location":"semantic/training/#how-to-run","title":"How to Run","text":"<p>Use the CryoSiam CLI with the <code>semantic_train</code> subcommand:</p> <pre><code>cryosiam semantic_train --config_file=configs/semantic_train.yaml\n</code></pre> <p>This command loads the configuration, prepares the model and data, and performs the training.</p>"},{"location":"semantic/training/#example-configuration-file","title":"Example Configuration File","text":"<p>Below is a full example of a configuration file in YAML format. You can create this file at any location and pass the path to it with the <code>--config_file</code> argument.</p> Click to expand the example YAML <pre><code>data_folder: '/scratch/cryosiam/tomograms/'\nprediction_folder: '/scratch/cryosiam/experiments/dense_simsiam_semantic/predictions'\ntrained_model: '/scratch/cryosiam/experiments/dense_simsiam_semantic/model/model-best.ckpt'\nfile_extension: '.mrc'\n\ntest_files: [ 'TS_56_6.80Apx.mrc', 'TS_61_6.80Apx.mrc' ]\n\nsave_internal_files: False\nsave_original_file_extension: False\n\nparameters:\n  gpu_devices: 1\n  data:\n    patch_size: [ 128, 128, 128 ]\n    min: 0\n    max: 1\n    mean: 0\n    std: 1\n  network:\n    in_channels: 1\n    spatial_dims: 3\n    out_channels: 1\n    postprocessing: True\n    postprocessing_sizes: [ -1, 10000, -1, -1, -1 ]\n\nhyper_parameters:\n  batch_size: 5\n</code></pre> <p>This configuration tells CryoSiam: - Where the model is located - Which data to use - Where the prediction should be saved</p>"},{"location":"semantic/training/#configuration-fields-explained","title":"Configuration Fields Explained","text":"Field Description <code>data_folder</code> Path to the folder containing the denoised/noisy tomograms <code>prediction_folder</code> Path to the folder where the predictions will be saved <code>trained_model</code> Path to the trained model checkpoint <code>.ckpt</code> <code>file_extension</code> File extension of the tomograms, can be <code>.mrc</code> or <code>.rec</code> <code>test_files</code> <code>null</code> if all of the tomograms in <code>data_folder</code> will be predicted, else a list of selected tomogram names <code>save_internal_files</code> If the probability and distance map will be saved in .h5 file <code>save_original_file_extension</code> If <code>False</code> the output is saved in <code>.h5</code> format, else it will be saved in the <code>file_extension</code> format"},{"location":"semantic/training/#parameters","title":"<code>parameters</code>","text":"Field Description <code>input_dir</code> Folder containing <code>.mrc</code> or <code>.tiff</code> tomograms <code>file_type</code> Format of input tomograms: <code>mrc</code> or <code>tiff</code> <code>voxel_size</code> Size of one voxel in \u00c5ngstr\u00f6ms (used for scaling) <code>normalize</code> Normalize intensity before prediction (<code>true/false</code>)"},{"location":"semantic/training/#hyper_parameters","title":"<code>hyper_parameters</code>","text":"Field Description <code>batch_size</code> Batch size for prediction"},{"location":"semantic/training/#troubleshooting","title":"Troubleshooting","text":"Problem Suggested Fix <code>CUDA out of memory</code> Lower <code>batch_size</code> or use <code>device: cpu</code>"},{"location":"semantic/training/#related-commands","title":"Related Commands","text":"<ul> <li>CryoSiam Denoising Training</li> <li>CryoSiam Instance Prediction</li> <li>Installation Guide</li> </ul>"},{"location":"semantic/training/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ </li> <li>Or open an issue on GitHub</li> </ul>"},{"location":"simsiam_embeds/embeddings/","title":"Embeddings","text":"<p>Coming soon ...</p>"},{"location":"simsiam_embeds/particle_identification/","title":"Particle identification","text":"<p>Coming soon ...</p>"}]}